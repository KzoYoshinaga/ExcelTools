' メンバ *****************************
Private values As New collection

' インスタンスコピー *****************
Public Property Get clone() As Tuple
    Dim r As New Tuple
    r.setValues = values
    Set clone = r
End Property

' プライベートコンストラクタ *********
Private Property Get newTuple(vs As collection) As Tuple
    Dim r As New Tuple
    r.setValues = vs
    Set newTuple = r
End Property

' イニシャライザ *********************
Public Property Let setValues(vs As collection)
    Set values = vs
End Property

' オブジェクト共通 ********************
Public Property Get toString()
    toString = "Tuple(" & join(values, ", ") & ")"
End Property

Private Property Get join(c As collection, delimiter As String)
    Dim r As String
    For i = 1 To c.count
        If i < c.count Then
            r = r & c(i) & delimiter
        Else
            r = r & c(i)
        End If
    Next
    join = r
End Property

Public Property Get equals(that As Tuple)
    If toString() = that.toString Then
        equals = True
    Else
        equals = False
    End If
End Property

' クエリ *****************************

' 値挿入
' @param that: Tuple 挿入する値を持つタプル
' @param dest: Integer 挿入先の要素番号
' @return Tuple 値が挿入された新しいタプル
Public Property Get insert(that As Tuple, dest As Integer) As Tuple
    ' 挿入先修正
    Dim d As Integer
    d = middle(1, dest, count() + 1)
    ' コレクションコピー
    Dim v As collection
    Set v = newCollection(values)
    ' 挿入後の新しいコレクション
    Dim c As New collection
    ' 新しいコレクションに貼り付け
    Dim i As Integer
    For i = 1 To v.count + 1
        ' 挿入する値
        If i = d Then
           For Each tv In that.getValues()
               c.add tv
           Next
        End If
        ' 既存の値
        If i <= v.count Then
            c.add v(i)
        End If
    Next
    Set insert = newTuple(c)
End Property

' 値削除
' @param from: Integer 削除する要素の開始番号
' @param size: Integer 削除する要素の件数
' @return Tuple 要素が削除された新しいタプル
Public Property Get remove(from As Integer, size As Integer) As Tuple
    ' 開始番号修正
    Dim f As Integer
    f = middle(1, from, count())
    ' 件数修正
    Dim s As Integer
    s = greater(1, size)
    s = less(values.count, f + s - 1) - f + 1
    ' 削除
    Dim vs As collection
    Set vs = newCollection(values)
    For i = 1 To s
        vs.remove f
    Next
    Set remove = newTuple(vs)
End Property

' 値抜き出し
' @param from: Integer 抜き出す要素の開始番号
' @param size: Integer 抜き出す要素の件数
' @return Tuple 抜き出した値を持つ新しいタプル
Public Property Get trim(from As Integer, size As Integer) As Tuple
    ' 開始番号修正
    Dim f As Integer
    f = middle(1, from, count())
    ' 件数修正
    Dim s As Integer
    s = greater(0, size)
    ' 終了番号
    Dim l As Integer
    l = less(values.count, f + s - 1)
    ' 抜き出し
    Dim vs As New collection
    For i = f To l
        vs.add values(i)
    Next
    Set trim = newTuple(vs)
End Property

' 値移動
' @param from: Integer 移動する値の開始番号
' @param size: Integer 移動する値の件数
' @param dest: Integer 移動先の番号
' @param Tuple 値が移動された新しいタプル
Public Property Get move(from As Integer, size As Integer, dest As Integer) As Tuple
    ' 選択サイズ修正
    Dim s As Integer
    s = greater(size, 1)
    ' 選択範囲修正
    Dim f As Integer
    f = greater(1, from)
    Dim l As Integer
    l = less(count(), from + size - 1)
    ' 移動先修正
    Dim d As Integer
    d = middle(1, dest, count() + 1)
    
    ' 移動
    If d = middle(f, d, l) Then
        ' 移動先が選択範囲内ならば何もしない
        Set move = clone()
    ElseIf d = middle(1, d, f) Then
        ' 移動先が選択開始より前
        Dim t As Tuple
        Set t = trim(f, s)
        Dim r As Tuple
        Set r = remove(f, s)
        Set move = r.insert(t, d)
    ElseIf d = middle(l, d, count() + 1) Then
        ' 移動先が選択開始より後
        Dim t2 As Tuple
        Set t2 = trim(f, s)
        Dim r2 As Tuple
        Set r2 = remove(f, s)
        Set move = r2.insert(t2, d - t2.count())
    Else
        Debug.Assert False
    End If
End Property

' 分割
' @param no: Integer 分割する場所のインデックス
' @return TupleCollection 分割されたタプルを含むコレクション
Public Property Get split(no As Integer) As Tuples2
    Dim r As New Tuples2
    r.setLeft = trim(1, no - 1)
    r.setRight = trim(no + 1, count() - no + 1)
    Set split = r
End Property

' マージ
' @param that: Tuple マージ対象タプル
' @return Tuple マージされた新しいタプル
Public Property Get marge(that As Tuple) As Tuple
    Set marge = insert(that, count() + 1)
End Property

' 交互マージ
' 要素数の少ない方の要素数に切り詰められる
' @param that: Tuple 交互にマージするタプル
' @return Tuple 交互にマージされた新しいタプル
Public Property Get zip(that As Tuple) As Tuple
    c = lessCount(that)
    Dim vs As New collection
    Dim i As Integer
    For i = 1 To c
        vs.add values(i)
        vs.add that.getValue(i)
    Next
    Set zip = newTuple(vs)
End Property

' 要素コレクションを取得
' @return Collection 要素のコレクション
Public Property Get getValues() As collection
    Set getValues = newCollection(values)
End Property


' 要素を取得
' @param no 取り出す要素番号
' @return 取り出す要素
Public Property Get getValue(no As Integer)
    getValue = values.Item(no)
End Property

' 要素数を取得
' @return 要素の数
Public Property Get count()
    count = values.count()
End Property

' プライベート ***********************

' 要素数の少ない方の要素数を取得
' @param that: Tuple 比較対象タプル
' @return Integer 要素数が少ない方の要素数
Private Property Get lessCount(that As Tuple)
    If values.count < that.count Then
        lessCount = values.count
    Else
        lessCount = that.count
    End If
End Property
