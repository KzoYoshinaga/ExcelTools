' Tuple **********************************************

' 新しいインスタンスが生成されること
Function createNewInstance()
    ' SetTestName
    testName = "createNewInstance()"

    ' Arrange
    Dim values As New collection
    values.add "a"
     
    ' Do
    Dim t As New Tuple
    t.setValues = values
    
    ' Verification
    result = equals(t.toString, "Tuple(a)")
    verify result, testName
End Function

' remove() *********************************************

' 要素が一件削除できること
Private Function removeValue()
    ' SetTestName
    testName = "removeValue()"

    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Set t = t.remove(1, 1)
    
    ' Verifivation
    result = equals(t.toString, "Tuple(b)")
    verify result, testName
End Function

' 要素が複数件削除できること
Private Function removeValues()
    ' SetTestName
    testName = "removeValues()"

    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
    values.add "c"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Set t = t.remove(1, 2)
    
    ' Verifivation
    result = equals(t.toString, "Tuple(c)")
    verify result, testName
End Function

' 要素数以上の件数を指定すると、開始位置以降の全件が削除される
Private Function removeAllAfterFrom()
    ' SetTestName
    testName = "canRemoveAllAfterFrom()"

    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
    values.add "c"
    values.add "d"
     
    Dim t As New Tuple
    t.setValues = values
        
    ' Do
    Set t = t.remove(2, 100)
    
    ' Verifivation
    result = equals(t.toString, "Tuple(a)")
    verify result, testName
End Function

' trim() ***************************************************

' サイズ指定が0の場合要素が抜き出せないこと
Private Function trimNoValueWhenSize0()
    ' SetTestName
    testName = "trimNoValueWhenSize0()"

    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Set t = t.trim(1, 0)
    
    ' Verifivation
    result = equals(t.toString, "Tuple()")
    verify result, testName
End Function

' 要素を一件抜き出せること
Private Function trim1Value()
    ' SetTestName
    testName = "trim1Value()"

    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Set t = t.trim(1, 1)
    
    ' Verifivation
    result = equals(t.toString, "Tuple(a)")
    verify result, testName
End Function

' 要素を複数件抜き出せること
Private Function trimValues()
    ' SetTestName
    testName = "trimValues()"

    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
    values.add "c"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Set t = t.trim(1, 2)
    
    ' Verifivation
    result = equals(t.toString, "Tuple(a, b)")
    verify result, testName
End Function

' 要素数以上の件数を指定すると、開始位置以降の全件が抜き出されること
Private Function trimAllAfterFrom()
    ' SetTestName
    testName = "trimAllAfterFrom()"

    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
    values.add "c"
    values.add "d"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Set t = t.trim(3, 100)
            
    ' Verifivation
    result = equals(t.toString, "Tuple(c, d)")
    verify result, testName
End Function

' move() ***********************************************

' 移動先が1より小さい場合先頭に移動される
Private Function moveToTopWhenDestLessThan1()
    'SetTestName
    testName = "moveToTopWhenDestLessThan1()"
    
    ' Arrange
    Dim values As New collection
    values.add "1"
    values.add "2"
    values.add "3"
    values.add "4"
    values.add "5"
    values.add "6"
    values.add "7"
    values.add "8"
    
    Dim f As New Factory
    
    Dim t As Tuple
    Set t = f.newTuple(values)
    
    ' Do
    Set t = t.move(2, 2, -1)
    
    ' Verification
    result = equals(t.toString, "Tuple(2, 3, 1, 4, 5, 6, 7, 8)")
    verify result, testName
End Function

' 移動先が1の場合先頭に移動される
Private Function moveToTopWhenDestEquals1()
    'SetTestName
    testName = "moveToTopWhenDestEquals1()"
    
    ' Arrange
    Dim values As New collection
    values.add "1"
    values.add "2"
    values.add "3"
    values.add "4"
    values.add "5"
    values.add "6"
    values.add "7"
    values.add "8"
    
    Dim f As New Factory
    
    Dim t As Tuple
    Set t = f.newTuple(values)
    
    ' Do
    Set t = t.move(2, 2, 1)
    
    ' Verification
    result = equals(t.toString, "Tuple(2, 3, 1, 4, 5, 6, 7, 8)")
    verify result, testName
End Function

' 移動先が選択範囲内ならば移動しない
Private Function moveSamePlaceWhenDestInsideSelection()
    'SetTestName
    testName = "moveSamePlaceWhenDestInsideSelection()"
    
    ' Arrange
    Dim values As New collection
    values.add "1"
    values.add "2"
    values.add "3"
    values.add "4"
    values.add "5"
    values.add "6"
    values.add "7"
    values.add "8"
    
    Dim f As New Factory
    
    Dim t As Tuple
    Set t = f.newTuple(values)
    
    ' Do
    Set t = t.move(2, 5, 3)
    
    ' Verification
    result = equals(t.toString, "Tuple(1, 2, 3, 4, 5, 6, 7, 8)")
    verify result, testName
End Function

' 移動先が(全体件数-選択件数)より大きい場合最終番号に移動される
Private Function moveToLastWhenDestGreaterThanAndEqualsRemovedTupleCount()
    'SetTestName
    testName = "moveToLastWhenDestGreaterThanAndEqualsRemovedTupleCount()"
    
    ' Arrange
    Dim values As New collection
    values.add "1"
    values.add "2"
    values.add "3"
    values.add "4"
    values.add "5"
    values.add "6"
    values.add "7"
    values.add "8"
    
    Dim f As New Factory
    
    Dim t As Tuple
    Set t = f.newTuple(values)
    
    ' Do
    Set t = t.move(2, 2, 9)
        
    ' Verification
    result = equals(t.toString, "Tuple(1, 4, 5, 6, 7, 8, 2, 3)")
    verify result, testName
End Function

' split() ***************************************************

' 要素が2つに分割されること
Private Function split2TuplesWhenInsideCount()
    ' SetTestName
    testName = "split2TuplesWhenNoInsideCount()"
    
    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
    values.add "c"
    values.add "d"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Dim ts2 As Tuples2
    Set ts2 = t.split(4)
        
    ' Verification
    result = equals(ts2.toString, "Tuples2(Tuple(a, b, c), Tuple(d))")
    verify result, testName
End Function

' 後方が空要素になること
Private Function rightTuplesEmptyWhenLargerCount()
    ' SetTestName
    testName = "rightTuplesEmptyWhenLargerCount()"
    
    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
    values.add "c"
    values.add "d"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Dim ts2 As Tuples2
    Set ts2 = t.split(5)
        
    ' Verification
    result = equals(ts2.toString, "Tuples2(Tuple(a, b, c, d), Tuple())")
    verify result, testName
End Function

' 前方が空要素になること
Private Function leftTuplesEmptyWhenLessCount()
    ' SetTestName
    testName = "leftTuplesEmptyWhenLessCount()"
    
    ' Arrange
    Dim values As New collection
    values.add "a"
    values.add "b"
    values.add "c"
    values.add "d"
     
    Dim t As New Tuple
    t.setValues = values
    
    ' Do
    Dim ts2 As Tuples2
    Set ts2 = t.split(-1)
    
    ' Verification
    result = equals(ts2.toString, "Tuples2(Tuple(), Tuple(a, b, c, d))")
    verify result, testName
End Function

' zip() ***************************************************

' 同じ要素数のタプルが交互にマージされること
Private Function zipWith2SameSizeTupples()
    ' SetTestName
    testName = "zipWith2SameSizeTupples()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "a"
    values1.add "c"
    values1.add "e"
    
    Dim values2 As New collection
    values2.add "b"
    values2.add "d"
    values2.add "f"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.zip(t2)
    
    ' Verification
    result = equals(t.toString, "Tuple(a, b, c, d, e, f)")
    verify result, testName
End Function

' 元タプルの要素数がマージ対象よりも少ない場合、元要素数で切り詰められること
Private Function zipWithOriginSize()
   ' SetTestName
    testName = "zipWithOriginSize()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "a"
    values1.add "c"
    
    Dim values2 As New collection
    values2.add "b"
    values2.add "d"
    values2.add "f"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.zip(t2)
    
    ' Verification
    result = equals(t.toString, "Tuple(a, b, c, d)")
    verify result, testName
End Function

' マージ対象タプルの要素数が元タプルよりも少ない場合、対象要素数で切り詰められること
Private Function zipWithObjectiveSize()
    ' SetTestName
    testName = "zipWithOppositSize()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "a"
    values1.add "c"
    values1.add "e"
    
    Dim values2 As New collection
    values2.add "b"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.zip(t2)
    
    ' Verification
    result = equals(t.toString, "Tuple(a, b)")
    verify result, testName
End Function

' insert() ************************************************************

' 移動先に1より小さい値を指定した場合、先頭に挿入されること
Private Function insertToTopWhenDestLessThan1()
    ' SetTestName
    testName = "insertToTopWhenDestLessThan1()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "1"
    values1.add "2"
    values1.add "3"
    values1.add "4"
    values1.add "5"
    
    Dim values2 As New collection
    values2.add "a"
    values2.add "b"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.insert(t2, -1)
    
    ' Verification
    result = equals(t.toString, "Tuple(a, b, 1, 2, 3, 4, 5)")
    verify result, testName
End Function

' 移動先に1を指定した場合、先頭に挿入されること
Function insertToTopWhenDestEquals1()
    ' SetTestName
    testName = "insertToTopWhenDestEquals1()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "1"
    values1.add "2"
    values1.add "3"
    values1.add "4"
    values1.add "5"
    
    Dim values2 As New collection
    values2.add "a"
    values2.add "b"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.insert(t2, 1)
    
    ' Verification
    result = equals(t.toString, "Tuple(a, b, 1, 2, 3, 4, 5)")
    verify result, testName
End Function

' 移動先に1より大きく、タプルサイズより小さい値を指定した場合、指定位置に挿入されること
Function insertToDestWhenDestWasMiddleOfTuple()
    ' SetTestName
    testName = "insertToDestWhenDestWasMiddleOfTuple()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "1"
    values1.add "2"
    values1.add "3"
    values1.add "4"
    values1.add "5"
    
    Dim values2 As New collection
    values2.add "a"
    values2.add "b"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.insert(t2, 3)
    
    ' Verification
    result = equals(t.toString, "Tuple(1, 2, a, b, 3, 4, 5)")
    verify result, testName
End Function

' 移動先にタプルサイズを指定した場合、最終列より1小さい列に挿入されること
Function insertToPreLastWhenDestEqualsLast()
    ' SetTestName
    testName = "insertToPreLastWhenDestEqualsLast()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "1"
    values1.add "2"
    values1.add "3"
    values1.add "4"
    values1.add "5"
    
    Dim values2 As New collection
    values2.add "a"
    values2.add "b"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.insert(t2, 5)
    
    ' Verification
    result = equals(t.toString, "Tuple(1, 2, 3, 4, a, b, 5)")
    verify result, testName
End Function

' 移動先にタプルサイズより大きな値を指定した場合、最終列に挿入（マージ）されること
Function insertToLastWhenDestGreaterThanLast()
    ' SetTestName
    testName = "insertToLastWhenDestGreaterThanLast()"
    
    ' Arrange
    Dim values1 As New collection
    values1.add "1"
    values1.add "2"
    values1.add "3"
    values1.add "4"
    values1.add "5"
    
    Dim values2 As New collection
    values2.add "a"
    values2.add "b"
     
    Dim t1 As New Tuple
    t1.setValues = values1
    
    Dim t2 As New Tuple
    t2.setValues = values2
    
    ' Do
    Dim t As Tuple
    Set t = t1.insert(t2, 6)
    
    ' Verification
    result = equals(t.toString, "Tuple(1, 2, 3, 4, 5, a, b)")
    verify result, testName
End Function


Function TupleTest()
    Debug.Print ""
    Debug.Print "test start"
    
    createNewInstance
    
   
    ' remove()
    removeValue
    removeValues
    removeAllAfterFrom
    
    ' trim()
    trimNoValueWhenSize0
    trim1Value
    trimValues
    trimAllAfterFrom
    
    ' move()
    moveToTopWhenDestLessThan1
    moveToTopWhenDestEquals1
    moveSamePlaceWhenDestInsideSelection
    moveToLastWhenDestGreaterThanAndEqualsRemovedTupleCount
    
    ' split()
    split2TuplesWhenInsideCount
    rightTuplesEmptyWhenLargerCount
    leftTuplesEmptyWhenLessCount
    
    ' zip()
    zipWith2SameSizeTupples
    zipWithOriginSize
    zipWithObjectiveSize
    
    ' insert()
    insertToTopWhenDestLessThan1
    insertToTopWhenDestEquals1
    insertToDestWhenDestWasMiddleOfTuple
    insertToPreLastWhenDestEqualsLast
    insertToLastWhenDestGreaterThanLast
    
End Function
